@using DataGridProject.Components

<PageTitle>DataGrid</PageTitle>

<h1>Datagrid</h1>

<p>This component demonstrates displaying data</p>

@if (testData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataGrid Items="FilteredData" IsPaginated class="table-striped table-hover" DefaultItemsPerPage="15" TGridItem="SearchMeasurementListItem" RowClick="Click">
             <GridItem Field="@nameof(SearchMeasurementListItem.MeasurementId)" />
             <GridItem Field="@nameof(SearchMeasurementListItem.Id)" />
             <GridItem Title="GUID" DefaultFilterValueHasChanged="EffectFilterHasChanged">
                 <ColumnTemplate>
                     <div class="d-flex align-items-center">
                         @context.MeasurementId
                         @context.StartDate
                     </div>
                     <div class="d-flex align-items-center">
                         @context.MeasurementPath
                         <strong>
                             @context.TotalEffect
                         </strong>
                     </div>
                 </ColumnTemplate>
                 <FilterTemplate>
                     <p>Min: <input type="range" @bind="minEffect" @bind:event="oninput" min="0" max="190" /> <span class="inline-block w-10">@minEffect</span></p>
                     <p>Max: <input type="range" @bind="maxEffect" @bind:event="oninput" min="@minEffect" max="200" /> <span class="inline-block w-10">@maxEffect</span></p>
                 </FilterTemplate>
             </GridItem>

             <GridItem Field="CustomerName" Title="Name" IsSortable IsFilterable />
         <GridItem Title="Quick checks" DefaultFilterValueHasChanged="BreakdownReportFilterHasChanged">
             <ColumnTemplate>
                 <div>
                     @if (context.HasBreakdowns)
                    {
                        <span>Has Breakdowns</span>
                    }
                    else
                    {
                        <span><strong>No</strong> Breakdowns found</span>
                    }
                </div>
                <div>
                    @if (context.HasCustomReport)
                    {
                        <span>Has @context.CustomReports.Count custom reports</span>
                    }
                </div>
            </ColumnTemplate>
            <FilterTemplate>
                <p><input type="checkbox" @bind=hasBreakdowns @bind:event="onchange"> Has Breakdowns</p>
                <p><input type="checkbox" @bind=hasCustomReports @bind:event="onchange" /> Has Custom Reports</p>
            </FilterTemplate>
        </GridItem>
        <GridItem Field="@nameof(SearchMeasurementListItem.MeasurementName)" IsSortable IsFilterable />
         <GridItem Field="@nameof(SearchMeasurementListItem.BrandName)" />
     </DataGrid>
}

@code {

    private List<SearchMeasurementListItem> testData;

    double minEffect;
    double maxEffect = 200;
    bool hasBreakdowns;
    bool hasCustomReports;

    public bool EffectFilterHasChanged => (minEffect > 0 || maxEffect < 200);
    public bool BreakdownReportFilterHasChanged => (hasBreakdowns || hasCustomReports);

    List<SearchMeasurementListItem> FilteredData
    {
        get
        {
            var result = testData.Where(x => x.TotalEffect <= maxEffect);

            if (minEffect > 0)
                result = result.Where(x => x.TotalEffect >= minEffect);

            if (hasBreakdowns)
                result = result.Where(x => x.HasBreakdowns);

            if (hasCustomReports)
                result = result.Where(x => x.HasCustomReport);

            return result.ToList();
        }
    }

    public void Click(SearchMeasurementListItem item)
    {
        Console.WriteLine(item.Id);
    }


    protected override void OnInitialized()
    {
        testData = BogusData.GetData(1003);
    }
}

@page "/datagrid"

@implements IFilterObserver
@implements IDisposable
@inject IFilter FilterSubject

<PageTitle>DataGrid</PageTitle>

@if (testData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NotificationComponent />
    <button class="btn btn-primary mx-3 mt-2" @onclick="ChangeData">Click to Toggle Input Data</button>

    <DataFilter Items="testData" @ref="externalFilter">
        <FilterItem FilterType="FilterTypes.Int" Field="@nameof(SearchMeasurementListItem.Id)" />
        <FilterItem FilterType="FilterTypes.DateTime" Field="@nameof(SearchMeasurementListItem.TestDate)" />
        <FilterItem FilterType="FilterTypes.String" Field="@nameof(SearchMeasurementListItem.MeasurementName)" />
        <FilterItem FilterType="FilterTypes.MinMax" Field="@nameof(SearchMeasurementListItem.TotalEffect)" />

        <FilterItem FilterType="FilterTypes.String" Field="@nameof(SearchMeasurementListItem.CustomerName)" Label="Name" />
        <FilterItem FilterType="FilterTypes.String" Field="@nameof(SearchMeasurementListItem.FormattedStartDate)" />
        <FilterItem FilterType="FilterTypes.DateTime" Field="@nameof(SearchMeasurementListItem.EndDate)" />
        <FilterItem FilterType="FilterTypes.DateTimeMin" Field="@nameof(SearchMeasurementListItem.StartDate)" />

        <FilterItem FilterType="FilterTypes.DateTimeMax" Field="@nameof(SearchMeasurementListItem.StartDate)" />
        <FilterItem FilterType="FilterTypes.CheckBox" Field="@nameof(SearchMeasurementListItem.HasBreakdowns)" />
        <FilterItem IsSwitch FilterType="FilterTypes.CheckBox" Field="@nameof(SearchMeasurementListItem.HasCustomReport)" />
         <FilterItem FilterType="FilterTypes.MultiCheckbox" Field="@nameof(SearchMeasurementListItem.Status)" Options="radioButtonOptions" DefaultSelectedOption="Active" />
         <FilterItem FilterType="FilterTypes.MultiCheckbox" Field="@nameof(SearchMeasurementListItem.Status2)" Options="radioButtonOptions" DefaultSelectedOption="Active" />

         <FilterItem IsSelectSorted FilterType="FilterTypes.Select" Field="@nameof(SearchMeasurementListItem.BrandName)" />

     </DataFilter>

    <DataGrid Items="externalFilter?.FilteredItems" class="table-striped table-hover"
              DefaultItemsPerPage="15"
              TGridItem="SearchMeasurementListItem"
              RowClick="Click"
              StylingHandler="HandleStyling"
            IsPaginated>
     <GridItem Field="@nameof(SearchMeasurementListItem.Id)" />
     <GridItem Field="@nameof(SearchMeasurementListItem.MeasurementId)" />
     <GridItem Title="Custom column template" DefaultFilterValueHasChanged="EffectFilterHasChanged">
         <ColumnTemplate>
             <div class="d-flex align-items-center">
                 @context.MeasurementId
                    @context.StartDate
                </div>
                <div class="d-flex align-items-center">
                    @context.MeasurementPath
                    <strong>
                        @context.TotalEffect
                    </strong>
                </div>
            </ColumnTemplate>
            <FilterTemplate>
                <p>Min: <input type="range" @bind="minEffect" @bind:event="oninput" min="0" max="190" /> <span>@minEffect</span></p>
                <p>Max: <input type="range" @bind="maxEffect" @bind:event="oninput" min="@minEffect" max="200" /> <span>@maxEffect</span></p>
            </FilterTemplate>
        </GridItem>

        <GridItem Field="CustomerName" Title="Name" IsSortable IsFilterable />
         <GridItem Title="Quick checks" DefaultFilterValueHasChanged="BreakdownReportFilterHasChanged">
             <ColumnTemplate>
                 <div>
                     @if (context.HasBreakdowns)
                    {
                        <span>Has Breakdowns</span>
                    }
                    else
                    {
                        <span><strong>No</strong> Breakdowns found</span>
                    }
                </div>
                <div>
                    @if (context.HasCustomReport)
                    {
                        <span>Has @context.CustomReports.Count custom reports</span>
                    }
                </div>
            </ColumnTemplate>
            <FilterTemplate>
                <p><input type="checkbox" @bind=hasBreakdowns @bind:event="onchange"> Has Breakdowns</p>
                <p><input type="checkbox" @bind=hasCustomReports @bind:event="onchange" /> Has Custom Reports</p>
            </FilterTemplate>
        </GridItem>
        <GridItem Align="Align.Right" Field="@nameof(SearchMeasurementListItem.MeasurementName)" IsSortable IsFilterable />
         <GridItem Field="@nameof(SearchMeasurementListItem.BrandName)" />
         <GridItem Field="@nameof(SearchMeasurementListItem.FormattedEndDate)" />
        <GridItem Field="@nameof(SearchMeasurementListItem.Status)" IsSortable />
        <GridItem Field="@nameof(SearchMeasurementListItem.Status2)" />
        <GridItem Title="">       
            <ColumnTemplate>
                @context.MeasurementPath
            </ColumnTemplate>
        </GridItem>
        <GridItem Field="@nameof(SearchMeasurementListItem.TestDate)" />
    </DataGrid>
}

@code {

    private List<SearchMeasurementListItem> testData;

    double minEffect;
    double maxEffect = 200;
    bool hasBreakdowns;
    bool hasCustomReports;
    DataFilter<SearchMeasurementListItem> externalFilter;

    Dictionary<string, string> radioButtonOptions;

    public bool EffectFilterHasChanged => (minEffect > 0 || maxEffect < 200);
    public bool BreakdownReportFilterHasChanged => (hasBreakdowns || hasCustomReports);

    private bool initialData = true;
    void ChangeData()
    {
        initialData = !initialData;
        if (initialData)
            testData = BogusData.GetData(103).ToList();
        else
            testData = BogusData.GetData(1000).Skip(980).ToList();
    }

    public void Update()
    {
        StateHasChanged();
    }

    string HandleStyling(SearchMeasurementListItem item)
    {
        if (item.Id % 3 == 0)
        {
            return "color:red";
        }
        return "";
    }

    List<SearchMeasurementListItem> FilteredData
    {
        get
        {
            var result = testData.Where(x => x.TotalEffect <= maxEffect);

            if (minEffect > 0)
                result = result.Where(x => x.TotalEffect >= minEffect);

            if (hasBreakdowns)
                result = result.Where(x => x.HasBreakdowns);

            if (hasCustomReports)
                result = result.Where(x => x.HasCustomReport);

            return result.ToList();
        }
    }

    public void Click(SearchMeasurementListItem item)
    {
        //Do something based on item
        Console.WriteLine("Clicked: " + item.Id);
    }

    protected override void OnInitialized()
    {
        testData = BogusData.GetData(103);
        FilterSubject.RegisterObserver(this);

        radioButtonOptions = testData.Select(x => x.Status).Distinct().ToDictionary(value => value.ToString(), display => display.ToString());

    }

    public void Dispose()
    {
        FilterSubject.RemoveObserver(this);
    }
}

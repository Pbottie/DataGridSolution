@using DataGridProject.Components
@implements IFilterObserver
@implements IDisposable
@inject IFilter FilterSubject

<PageTitle>DataGrid</PageTitle>

@if (testData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataFilter Items="testData" @ref="externalFilter">
        <FilterItem FilterType="FilterTypes.String" Field="@nameof(SearchMeasurementListItem.MeasurementName)" />
        <FilterItem FilterType="FilterTypes.Int" Field="@nameof(SearchMeasurementListItem.Id)" />
        <FilterItem FilterType="FilterTypes.MinMax" Field="@nameof(SearchMeasurementListItem.TotalEffect)" />
        <FilterItem FilterType="FilterTypes.String" Field="@nameof(SearchMeasurementListItem.CustomerName)" Label="Name" />
        <FilterItem FilterType="FilterTypes.String" Field="@nameof(SearchMeasurementListItem.FormattedStartDate)" />
        <FilterItem FilterType="FilterTypes.DateTimeMin" Field="@nameof(SearchMeasurementListItem.StartDate)" />
    </DataFilter>

    <DataGrid Items="externalFilter?.FilteredItems" class="table-striped table-hover"
              DefaultItemsPerPage="15"
              TGridItem="SearchMeasurementListItem"
              RowClick="Click"
            IsPaginated>
     <GridItem Field="@nameof(SearchMeasurementListItem.MeasurementId)" />
     <GridItem Field="@nameof(SearchMeasurementListItem.Id)" />
     <GridItem Title="GUID" DefaultFilterValueHasChanged="EffectFilterHasChanged">
         <ColumnTemplate>
             <div class="d-flex align-items-center">
                 @context.MeasurementId
                 @context.StartDate
             </div>
             <div class="d-flex align-items-center">
                 @context.MeasurementPath
                 <strong>
                     @context.TotalEffect
                 </strong>
             </div>
         </ColumnTemplate>
         <FilterTemplate>
             <p>Min: <input type="range" @bind="minEffect" @bind:event="oninput" min="0" max="190" /> <span>@minEffect</span></p>
             <p>Max: <input type="range" @bind="maxEffect" @bind:event="oninput" min="@minEffect" max="200" /> <span>@maxEffect</span></p>
         </FilterTemplate>
     </GridItem>

     <GridItem Field="CustomerName" Title="Name" IsSortable IsFilterable />
         <GridItem Title="Quick checks" DefaultFilterValueHasChanged="BreakdownReportFilterHasChanged">
             <ColumnTemplate>
                 <div>
                     @if (context.HasBreakdowns)
                    {
                        <span>Has Breakdowns</span>
                    }
                    else
                    {
                        <span><strong>No</strong> Breakdowns found</span>
                    }
                </div>
                <div>
                    @if (context.HasCustomReport)
                    {
                        <span>Has @context.CustomReports.Count custom reports</span>
                    }
                </div>
            </ColumnTemplate>
            <FilterTemplate>
                <p><input type="checkbox" @bind=hasBreakdowns @bind:event="onchange"> Has Breakdowns</p>
                <p><input type="checkbox" @bind=hasCustomReports @bind:event="onchange" /> Has Custom Reports</p>
            </FilterTemplate>
        </GridItem>
        <GridItem Field="@nameof(SearchMeasurementListItem.MeasurementName)" IsSortable IsFilterable />
         <GridItem Field="@nameof(SearchMeasurementListItem.BrandName)" />
     </DataGrid>
}

@code {

    private List<SearchMeasurementListItem> testData;

    double minEffect;
    double maxEffect = 200;
    bool hasBreakdowns;
    bool hasCustomReports;
    DataFilter<SearchMeasurementListItem> externalFilter;

    public bool EffectFilterHasChanged => (minEffect > 0 || maxEffect < 200);
    public bool BreakdownReportFilterHasChanged => (hasBreakdowns || hasCustomReports);

    // List<SearchMeasurementListItem> debugList;

    public void Update()
    {
        // debugList = externalFilter?.FilteredItems.ToList();
        StateHasChanged();
    }

    List<SearchMeasurementListItem> FilteredData
    {
        get
        {
            var result = testData;

            if (externalFilter != null)
            {
                result = externalFilter.FilteredItems.ToList();
            }

            return result;
            // var result = testData.Where(x => x.TotalEffect <= maxEffect);

            // if (minEffect > 0)
            //     result = result.Where(x => x.TotalEffect >= minEffect);

            // if (hasBreakdowns)
            //     result = result.Where(x => x.HasBreakdowns);

            // if (hasCustomReports)
            //     result = result.Where(x => x.HasCustomReport);

            // return result.ToList();
        }
    }

    public void Click(SearchMeasurementListItem item)
    {

    }

    protected override void OnInitialized()
    {
        testData = BogusData.GetData(103);
        FilterSubject.RegisterObserver(this);
    }

    public void Dispose()
    {
        FilterSubject.RemoveObserver(this);
    }
}

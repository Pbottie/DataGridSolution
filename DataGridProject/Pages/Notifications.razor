@page "/notifications"

<div class="m-2">
    <h3>Notifications</h3>

    <button @onclick="@(()=>ShowNotification("Testing Warning!", NotificationType.Warning))"> Click for Warning notification</button>
    <button @onclick="@(()=>ShowNotification("Testing Info!", NotificationType.Info))"> Click for Info notification</button>
    <button @onclick="@(()=>ShowNotification("Testing Success!", NotificationType.Success))"> Click for Success notification</button>
    <button @onclick="@(()=>ShowNotification("Testing Error!", NotificationType.Error))"> Click for Error notification</button>

    <div class="m-2">
        <span>
            <label>
                Message
                <InputText @bind-Value="@notification"></InputText>
            </label>

            <label>
                Type
                <InputSelect @bind-Value="@type">
                    @foreach (var option in types)
                    {
                        <option value="@option">@option.ToString()</option>
                    }
                </InputSelect>
            </label>
            <label>
                Wait to show (ms)
                <InputNumber @bind-Value="@wait"></InputNumber>
            </label>
            <label>
                Delay before dismiss (ms)
                <InputNumber @bind-Value="@delay"></InputNumber>
            </label>
        </span>
        <button @onclick="@(()=>ShowCustomNotification(notification, type, wait, delay))"> Click for Custom notification</button>
    </div>
</div>

@code {
    [Inject] NotificationService NotificationService { get; set; }
    private string notification;
    private NotificationType type;
    private int wait;
    private int delay;
    private List<NotificationType> types;

    protected override void OnInitialized()
    {
        types = Enum.GetValues(typeof(NotificationType)).Cast<NotificationType>().ToList();

    }

    void ShowNotification(string message, NotificationType type)
    {
        NotificationService.Notify(message, type);
    }

    async Task ShowCustomNotification(string message, NotificationType type, int wait, int delay)
    {
        delay = Math.Abs(delay);
        await Task.Delay(wait);
        NotificationService.Notify(message, type, delay);
    }


}

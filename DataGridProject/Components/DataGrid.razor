@inherits UIComponentBase
@typeparam TGridItem
@attribute [CascadingTypeParameter(nameof(TGridItem))]

@if (!NoRender)
{
    <CascadingValue Value="this">
        <div class="mx-3 pt-4">
            @foreach (var kvp in filterTextDict)
            {
                if (kvp.Value != "")
                {
                    <span role="button" @key="kvp" class="badge bg-secondary mx-1" @onclick="()=>RemoveFilter(kvp.Key)">
                       X @(string.IsNullOrEmpty(kvp.Key.Title) ? kvp.Key.Field : kvp.Key.Title): @kvp.Value
                    </span>
                }
            }
            <table class="@ClassNames">
                <thead>
                    <tr>
                        @ChildContent
                    </tr>
                </thead>
                <tbody>
                    @if (RowClick.HasDelegate)
                    {
                        <GridRow Items="TotalItems" ColumnFields="columnFields" GridItems="gridItems" Clicked="RowClick" />
                    }
                    else
                    {
                        <GridRow Items="TotalItems" ColumnFields="columnFields" GridItems="gridItems" />
                    }
                </tbody>
            </table>
            @if (IsPaginated)
            {
                <Paginator PaginationState="paginationState" OnPaginate="HandlePagination" />
            }
        </div>
    </CascadingValue>

}

@code {
    [Parameter]
    public IEnumerable<TGridItem> Items { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string DefaultSortedField { get; set; }

    [Parameter]
    public SortDirection DefaultSortDirection { get; set; }

    [Parameter]
    public bool IsPaginated { get; set; }

    [Parameter]
    public int DefaultItemsPerPage { get; set; }

    [Parameter]
    public EventCallback<TGridItem> RowClick { get; set; }

    public string SortedField { get; private set; }

    public List<GridItem<TGridItem>> gridItems = new();
    private bool isAscending;
    private Dictionary<GridItem<TGridItem>, string> filterTextDict = new();
    private List<string> columnFields = new();
    private PaginationState paginationState;

    private IEnumerable<TGridItem> items;
    private IEnumerable<TGridItem> ogItems;

    protected override void OnParametersSet()
    {
        classBuilder
        .Begin("table");

        if (ogItems != Items)
        {
            ogItems = Items;
            items = ogItems;
        }
    }

    protected override void OnInitialized()
    {
        if (IsPaginated)
        {
            paginationState = new();
            if (DefaultItemsPerPage > 0)
            {
                paginationState.ItemsPerPage = DefaultItemsPerPage;
            }
            paginationState.SetTotalItemsAsync(Items?.Count() ?? 0);
        }

    }

    public IEnumerable<TGridItem> TotalItems
    {
        get
        {
            var result = SortedItems
            ?.Where(x => IsFiltered(x))
            .ToList()
            ?? new();

            if (IsPaginated)
            {
                paginationState.SetTotalItemsAsync(result.Count);
                result = result.Skip(paginationState.ItemsPerPage * paginationState.PageIndex).Take(paginationState.ItemsPerPage).ToList();
            }

            return result;
        }
    }

    internal bool IsFiltered(TGridItem item)
    {
        return filterTextDict.All((kvp) => typeof(TGridItem).GetProperty(kvp.Key.Field).GetValue(item).ToString().ToLower().Contains(kvp.Value.ToLower()));
    }

    internal void UpdateColumnFields(string field)
    {
        if (!columnFields.Contains(field) || string.IsNullOrEmpty(field))
        {
            columnFields.Add(field);
        }
        else
        {
            throw new Exception("Field " + field + " already exists!");
        }
    }

    internal void RemoveFilter(GridItem<TGridItem> gridItem)
    {
        gridItem.RemoveFilter();
        Filter(gridItem, "");
    }

    internal void AddItem(GridItem<TGridItem> gridItem)
    {
        gridItems.Add(gridItem);
        UpdateColumnFields(gridItem.Field);
    }

    internal void Sort(string field)
    {

        if (field != SortedField)
        {
            isAscending = DefaultSortDirection == SortDirection.Ascending ? true : false;
            SortedField = field;
        }
        else
            isAscending = !isAscending;

        gridItems.Where(x => x.Field == field).FirstOrDefault().IsAscending = isAscending;

        StateHasChanged();
    }

    public void Filter(GridItem<TGridItem> gridItem, string filterText)
    {
        var property = typeof(TGridItem).GetProperty(gridItem.Field);

        if (filterTextDict.ContainsKey(gridItem))
            filterTextDict[gridItem] = filterText;
        else
            filterTextDict.Add(gridItem, filterText);

        StateHasChanged();
    }


    public IEnumerable<TGridItem>
        SortedItems
    {
        get
        {
            if (!string.IsNullOrEmpty(SortedField))
            {
                var property = typeof(TGridItem).GetProperty(SortedField);
                if (isAscending)
                    return Items.OrderBy(item => (string)property.GetValue(item));
                else
                    return Items.OrderByDescending(item => (string)property.GetValue(item));
            }

            return Items;
        }
    }

    internal void HandlePagination()
    {
        //Basically just for ReRendering
    }
}

@namespace DataGridProject.Components
@typeparam TDataItem
@attribute [CascadingTypeParameter(nameof(TDataItem))]

<CascadingValue Value="this">
    <div class="card m-3">
        <div class="card-body">
            <div class="d-flex flex-wrap row row-cols-1 row-cols-sm-2 row-cols-xl-4 m-1">
                @ChildContent
            </div>
        </div>
    </div>
    <div class="mx-3">
        @if (Filters.Any(x => x.IsActive))
        {
            <span role="button" @key="Guid.NewGuid()" class="badge bg-danger mx-1" @onclick="@(()=> ClearAllActiveFilters())">
                X Clear All
            </span>

        }

        @foreach (var filter in Filters)
        {
            if (filter.IsActive)
            {
                <span role="button" @key="Guid.NewGuid()" class="badge bg-secondary mx-1" @onclick="@(()=> filter.ClearFilter())">
                    X @filter.GetDisplayName: @(filter.FilterType == FilterTypes.MinMax ? @filter.FilterValue.Replace("_", " - ") : @filter.FilterValue)
                </span>
            }
        }
    </div>
</CascadingValue>


@code {

    [Parameter, EditorRequired]
    public IEnumerable<TDataItem> Items { get; set; }

    [Inject]
    public IFilter Filter { get; set; }

    IEnumerable<TDataItem> items { get; set; } = new List<TDataItem>();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override void OnParametersSet()
    {
        if (Items != null)
        {
            if (!Items.SequenceEqual(items))
            {
                items = Items;
                SetupFilters();
                Filter.NotifyAll();
            }
        }

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Filter.NotifyAll();
        }
    }

    public List<FilterItem<TDataItem>> Filters = new();
    private Dictionary<string, string?> FieldDict { get; set; } = new();
    private Dictionary<string, FilterTypes> FilterTypeDict { get; set; } = new();


    public void AddFilterItem(FilterItem<TDataItem> filterItem)
    {
        if (filterItem != null)
        {
            Filters.Add(filterItem);

            var fieldName = GetFieldName(filterItem);

            FieldDict.Add(fieldName, filterItem.FilterValue);
            FilterTypeDict.Add(fieldName, filterItem.FilterType);
        }
        SetupFilter(filterItem);
    }

    public IEnumerable<TDataItem> FilteredItems
    {
        get
        {
            var result = items;
            var activeFilters = Filters.Where(filter => filter.IsActive);
            result = result
            .Where(x => IsFiltered(x));

            return result;
        }
    }

    public void UpdateFilter(FilterItem<TDataItem> filterItem)
    {
        UpdateFieldDict(filterItem);

        StateHasChanged();
        Filter.NotifyAll();
    }

    private void SetupFilters()
    {
        foreach (var filter in Filters)
        {
            if (filter.FilterType == FilterTypes.Select || filter.FilterType == FilterTypes.MinMax)
                SetupFilter(filter);
        }
    }


    private void SetupFilter(FilterItem<TDataItem> filterItem)
    {
        if (filterItem.FilterType == FilterTypes.MinMax)
        {
            var property = typeof(TDataItem).GetProperty(filterItem.Field);

            var minSuccess = int.TryParse(items.Select(item => property.GetValue(item)).ToList().Min().ToString(), out int min);
            var maxSuccess = int.TryParse(items.Select(item => property.GetValue(item)).ToList().Max().ToString(), out int max);

            if (!minSuccess || !maxSuccess)
                throw new FormatException($"{filterItem.Field} min/max can't be parsed into int");

            filterItem.SetFilterMinMax(min, max);
        }

        if (filterItem.FilterType == FilterTypes.Select)
        {
            var property = typeof(TDataItem).GetProperty(filterItem.Field);
            List<string> list = new();
            if (filterItem.IsSelectSorted)
                list = items.Select(item => property.GetValue(item).ToString()).Distinct().Order().ToList();
            else
                list = items.Select(item => property.GetValue(item).ToString()).Distinct().ToList();
            filterItem.SelectOptions = list;
        }
    }

    private void ClearAllActiveFilters()
    {
        var activeFilters = Filters.Where(filter => filter.IsActive);
        foreach (var filter in activeFilters)
        {
            filter.ClearFilter();
        }

    }

    private string GetFieldName(FilterItem<TDataItem> filterItem)
    {
        var fieldName = filterItem.Field;
        if (filterItem.FilterType == FilterTypes.DateTimeMin || filterItem.FilterType == FilterTypes.DateTimeMax)
        {
            fieldName += filterItem.FilterType == FilterTypes.DateTimeMin ? "_Min" : "_Max";
        }
        return fieldName;
    }

    private void UpdateFieldDict(FilterItem<TDataItem> filterItem)
    {
        var fieldName = GetFieldName(filterItem);
        if (FieldDict.Keys.Contains(fieldName))
            FieldDict[fieldName] = filterItem.FilterValue;
    }

    internal bool IsFiltered(TDataItem item)
    {
        foreach (var kvp in FieldDict)
        {
            var field = GetCorrectFieldName(kvp.Key);

            var activeFields = Filters
            .Where(filter => filter.IsActive)
            .Select(filter => filter.Field);

            if (!activeFields.Contains(field) || kvp.Value == null)
            {
                continue;
            }

            var propertyValue = typeof(TDataItem).GetProperty(field).GetValue(item);
            var filterType = FilterTypeDict[kvp.Key];

            if (!EvaluateFilterByType(propertyValue, filterType, kvp.Value))
            {
                return false;
            }

        }
        return true;

    }

    private string GetCorrectFieldName(string key)
    {
        if (key.Contains("_Min") || key.Contains("_Max"))
        {
            key = key.Split("_M")[0];
        }
        return key;
    }

    private bool EvaluateFilterByType(object value, FilterTypes filterType, string filterValue)
    {
        if (value == null)
            return false;

        switch (filterType)
        {
            case FilterTypes.String:
                return EvaluateStringFilter(value, filterValue);
            case FilterTypes.Int:
                return EvaluateIntFilter(value, filterValue);
            case FilterTypes.MinMax:
                return EvaluateMinMaxFilter(value, filterValue);
            case FilterTypes.DateTime:
                return EvaluateDateTimeFilter(value, filterValue);
            case FilterTypes.DateTimeMin:
                return EvaluateDateTimeMinFilter(value, filterValue);
            case FilterTypes.DateTimeMax:
                return EvaluateDateTimeMaxFilter(value, filterValue);
            case FilterTypes.CheckBox:
                return EvaluateCheckBoxFilter(value, filterValue);
            case FilterTypes.RadioButton:
                return EvaluateRadioButtonFilter(value, filterValue);
            case FilterTypes.Select:
                return EvaluateSelectFilter(value, filterValue);
            default:
                return true;
        }

    }

    private bool EvaluateStringFilter(object value, string filterValue)
    {
        return value.ToString().ToLower().Contains(filterValue.ToLower());
    }

    private bool EvaluateIntFilter(object value, string filterValue)
    {
        return (int)value >= int.Parse(filterValue);
    }

    private bool EvaluateMinMaxFilter(object value, string filterValue)
    {
        var minMaxValues = filterValue.Split("_");
        if (minMaxValues.Length == 2 &&
            int.TryParse(minMaxValues[0], out int min) &&
            int.TryParse(minMaxValues[1], out int max) &&
            int.TryParse(value.ToString(), out int intValue))
        {
            return intValue >= min && intValue <= max;
        }
        return false;
    }

    private bool EvaluateDateTimeFilter(object value, string filterValue)
    {
        if (DateTime.TryParse(value.ToString(), out DateTime dateValue) &&
          DateTime.TryParse(filterValue, out DateTime filterDateValue))
        {
            return dateValue.Date == filterDateValue.Date;
        }
        return false;
    }

    private bool EvaluateDateTimeMinFilter(object value, string filterValue)
    {
        if (DateTime.TryParse(value.ToString(), out DateTime dateValue) &&
          DateTime.TryParse(filterValue, out DateTime filterDateValue))
        {
            return dateValue.Date >= filterDateValue.Date;
        }
        return false;
    }

    private bool EvaluateDateTimeMaxFilter(object value, string filterValue)
    {
        if (DateTime.TryParse(value.ToString(), out DateTime dateValue) &&
           DateTime.TryParse(filterValue, out DateTime filterDateValue))
        {
            return dateValue.Date <= filterDateValue.Date;
        }
        return false;
    }

    private bool EvaluateCheckBoxFilter(object value, string filterValue)
    {
        return value.ToString().Equals(filterValue, StringComparison.OrdinalIgnoreCase);
    }

    private bool CompareStrings(string value, string filterValue)
    {
        return value == filterValue;
    }

    private bool EvaluateRadioButtonFilter(object value, string filterValue)
    {
        return CompareStrings(value.ToString().ToLower(), filterValue.ToLower());

    }

    private bool EvaluateSelectFilter(object value, string filterValue)
    {
        return CompareStrings(value.ToString().ToLower(), filterValue.ToLower());
    }

}

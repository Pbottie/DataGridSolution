@namespace DataGridProject.Components
@typeparam TGridItem

@if (Items is not null)
{
    for (int i = 0; i < Items.Count(); i++)
    {
        var item = Items.ElementAt(i);
        <tr class="@CursorClass" @key="Guid.NewGuid()" @onclick="()=>HandleClick(item)">
            @{
                var count = GridItems.Count;
                var styling = HandleStyling?.Invoke(item);
                for (int j = 0; j < count; j++)
                {
                    var dataPosition = i * count + j;
                    var columnData = rowData[dataPosition];
                    <td class="@(GetAlignClass(GridItems[j]))" style="@styling">
                        @if (columnData is RenderFragment)
                        {
                            RenderFragment renderFragment = (RenderFragment)columnData;
                            @renderFragment
                        }
                        else
                        {
                            var data = columnData;
                            @data
                        }
                    </td>
                }
            }
        </tr>
    }
}


@code {
    [CascadingParameter]
    public DataGrid<TGridItem> ParentGrid { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<TGridItem> Items { get; set; }

    [Parameter, EditorRequired]
    public List<string> ColumnFields { get; set; }

    [Parameter]
    public EventCallback<TGridItem> Clicked { get; set; }

    [Parameter, EditorRequired]
    public List<GridItem<TGridItem>> GridItems { get; set; }

    [Parameter]
    public StylingHandler<TGridItem> HandleStyling { get; set; }

    List<object> rowData = new();

    protected override void OnParametersSet()
    {
        if (Items != null)
        {
            rowData.Clear();

            foreach (var item in Items)
            {
                foreach (var field in ColumnFields)
                {
                    var columnTemplate = GridItems.Where(grid => grid.Field == field).Select(item => item.ColumnTemplate).FirstOrDefault();
                    var columnData = DataUtils
                         .GetItemsPropertyInfo<TGridItem>()
                         .Where(x => x.Name == field)
                         .Select(y => y.GetValue(item))
                         .FirstOrDefault();
                    if (columnTemplate != null)
                        rowData.Add(columnTemplate(item));
                    else if (columnData != null)
                        rowData.Add(columnData);
                    else
                        rowData.Add(string.Empty);
                }
            }
        }

    }

    public async Task HandleClick(TGridItem item)
    {
        if (Clicked.HasDelegate)
            await Clicked.InvokeAsync(item);
    }

    private string? GetAlignClass(GridItem<TGridItem> gridItem)
    {
        return gridItem.Align.Equals(Align.Right) ? "text-end" : null;
    }

    string? CursorClass => Clicked.HasDelegate ? "grid-cursor-pointer" : null;
}
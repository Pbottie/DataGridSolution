@namespace DataGridProject.Components
@inherits UIComponentBase
@typeparam TGridItem

<th id="@ElementId" @attributes="@AdditionalAttributes" class="@ClassNames" width="@TableHeaderWidth">
    <div class="header-content @AlignClass" @onkeyup="HandleKeyUp">
        <div class="d-flex @RightAlign">
            @if (IsFilterable)
            {
                if (FilterClass == "filter-option")
                {
                    <button class="filter-option" type="button" @onclick="@HandleFilter">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-funnel" viewBox="0 0 16 16">
                            <path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2zm1 .5v1.308l4.372 4.858A.5.5 0 0 1 7 8.5v5.306l2-.666V8.5a.5.5 0 0 1 .128-.334L13.5 3.308V2h-11z" />
                        </svg>
                    </button>
                }
                else
                {
                    <button class="filter-option-full" type="button" @onclick="@HandleFilter">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-funnel-fill" viewBox="0 0 16 16">
                            <path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2z" />
                        </svg>
                    </button>
                }
            }
            <span class="label-content" @onmouseover="@HandleMouseOver" @onmouseout="@HandleMouseOut" @onclick=@HandleClick>
                @if (HeaderTemplate != null)
                {
                    @HeaderTemplate
                }
                else if (!string.IsNullOrEmpty(Title))
                {
                    @Title
                }
                else
                {
                    @GetColumnName()
                }
                @if (IsSortable)
                {
                    @if (IsAscending)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-up @isVisibleClass" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down @isVisibleClass" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                        </svg>
                    }
                }
            </span>
        </div>
        @if (isShowingFilterInput)
        {
            <div class="filter">
                @if (FilterTemplate != null)
                {
                    @FilterTemplate
                }
                else
                {
                    <div class="search-box">
                        <input type="search" autofocus @bind="filterText" @oninput="FilterFromInput" placeholder="Filter..." />
                    </div>
                }
            </div>
        }
    </div>
    <span class="position-fixed start-0 top-0 w-100 h-100 grid-filter-z @(isShowingFilterInput ? "" : "invisible")" @onclick=CloseFilter>
    </span>
</th>




@code {
    [CascadingParameter]
    public DataGrid<TGridItem> ParentGrid { get; set; }

    [Parameter]
    public RenderFragment HeaderTemplate { get; set; }
    [Parameter]
    public RenderFragment FilterTemplate { get; set; }
    [Parameter]
    public RenderFragment<TGridItem> ColumnTemplate { get; set; }
    [Parameter]
    public string Field { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public TGridItem Item { get; set; }
    [Parameter]
    public bool IsSortable { get; set; }
    [Parameter]
    public bool IsFilterable { get; set; }
    [Parameter]
    public bool DefaultFilterValueHasChanged { get; set; }
    [Parameter]
    public Align Align { get; set; }

    [Parameter]
    public int ColumnWidth { get; set; }

    public bool IsSorted => Field == (ParentGrid.SortedField ?? "-x-");
    public bool IsAscending;
    public RenderFragment ItemHeader;

    private bool isHovering;
    private bool isShowingFilterInput;
    private string filterText;
    private string isVisibleClass => IsSorted || (!IsSorted && isHovering) ? "visible" : "invisible";
    private string? AlignClass => Align.Equals(Align.Right) ? "flex-row-reverse" : null;
    private int? TableHeaderWidth => ColumnWidth != 0 ? ColumnWidth : null;
    private string FilterClass => DefaultFilterValueHasChanged ? "filter-option-full" : "filter-option";
    private string RightAlign => Align.Equals(Align.Right) ? null : "w-100";

    protected override void OnInitialized()
    {
        if (FieldDoesNotExistInItem() && !string.IsNullOrEmpty(Field))
            throw new ArgumentException($"Field name {Field} does not exist in item");

        if (string.IsNullOrEmpty(Field))
        {
            if (string.IsNullOrEmpty(Title) && HeaderTemplate == null)
                throw new ArgumentNullException("No Template found. Field and Title can't both be empty");

            if (IsFilterable)
                throw new ArgumentException("Can't filter with an empty Field");

            Field = Guid.NewGuid().ToString();
        }

        if (ParentGrid == null)
            throw new ArgumentNullException("Component must be used with DataGrid");

        if (ColumnTemplate != null && IsSortable)
            throw new ArgumentException("Can't use Sort on a custom column template");

        IsFilterable = IsFilterable || FilterTemplate != null;

        ParentGrid.AddItem(this);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        classBuilder
        .Begin("grid-cursor-pointer", IsSortable)
        .GetClass();

    }

    private bool FieldDoesNotExistInItem()
    {
        var propertyInfo = DataUtils.GetItemsPropertyInfo<TGridItem>()
        .Where(x => x.Name == Field);

        return (propertyInfo.Count() == 0) ? true : false;

    }

    private void HandleMouseOver() => isHovering = true;
    private void HandleMouseOut() => isHovering = false;

    private void CloseFilter() => isShowingFilterInput = false;

    private void CheckFilterStatus()
    {
        if (string.IsNullOrEmpty(filterText))
            DefaultFilterValueHasChanged = false;
        else
            DefaultFilterValueHasChanged = true;
    }

    private void HandleClick()
    {
        if (IsSortable)
        {
            ParentGrid.Sort(Field);
        }      
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
            CloseFilter();
    }

    private string GetColumnName()
     => DataUtils.GetItemsPropertyInfo<TGridItem>()
     .Select(x => x.Name)
     .Where(x => x == Field)
     .FirstOrDefault();

    private void FilterFromInput(ChangeEventArgs e)
    {
        filterText = e.Value.ToString();
        ParentGrid.Filter(this, filterText);
        CheckFilterStatus();
    }

    private void HandleFilter()
    {
        isShowingFilterInput = !isShowingFilterInput;
    }

    public void RemoveFilter()
    {
        filterText = "";
        DefaultFilterValueHasChanged = false;
    }
}

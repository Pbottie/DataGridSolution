@using System.Globalization;

<span class="input-container">
    <input @bind="dateString" @oninput="ValidateChange" @onkeyup="HandleKey" />
    <div class="calendar-button" @onclick="ToggleCalendarView">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar-event" viewBox="0 0 16 16">
            <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z" />
            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z" />
        </svg>
    </div>
</span>
@if (isValidDate)
{
    <button class="btn btn-primary" @onclick="Clear">Clear</button>
}
else
{
    <button class="btn btn-danger" @onclick="Clear">Clear</button>

}
@if (isShowingCalendar)
{
  
        <CalendarDatePicker SelectedDate="pickerDate" SelectedDateChanged="HandleDatePicker"></CalendarDatePicker>
    
}
<span class="fullscreen @(isShowingCalendar ? "" : "hidden")" @onclick=ToggleCalendarView></span>

@code {
    [Parameter, EditorRequired]
    public DateTime? Date { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<DateTime?> DateChanged { get; set; }

    private DateTime? pickerDate;
    private bool isValidDate;
    private bool isShowingCalendar;
    private string dateString;
    private string DateFormat;

    protected override void OnParametersSet()
    {
        DateFormat = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;

        pickerDate = Date;
        if (pickerDate == null)
        {
            dateString = DateFormat.ToLower();
        }
        else
        {
            dateString = pickerDate.Value.ToString(DateFormat);
        }
    }

    void ValidateChange(ChangeEventArgs e)
    {

        var input = e.Value.ToString();

        var success = DateTime.TryParseExact(input, DateFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result);
        if (success)
        {
            isValidDate = true;
            DateChanged.InvokeAsync(result);
        }
        else
        {
            isValidDate = false;
        }

    }

    void HandleKey(KeyboardEventArgs e)
    {
        if (pickerDate.HasValue)
        {

            if (e.Key == "ArrowUp")
            {
                pickerDate = pickerDate.Value.AddDays(1);
                isValidDate = true;
            }
            else if (e.Key == "ArrowDown")
            {
                pickerDate = pickerDate.Value.AddDays(-1);
                isValidDate = true;
            }

            DateChanged.InvokeAsync(pickerDate);
        }
    }

    void HandleDatePicker(DateTime date)
    {
        isValidDate = true;
        pickerDate = date;
        dateString = pickerDate.Value.ToString(DateFormat);
        DateChanged.InvokeAsync(date);
    }
    void ToggleCalendarView()
    {
        isShowingCalendar = !isShowingCalendar;
    }

    void Clear()
    {
        isValidDate = false;
        DateChanged.InvokeAsync();
    }

}

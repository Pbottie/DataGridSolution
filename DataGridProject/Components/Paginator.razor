

<div class="paginator">
    <div class="summary">
        <text><strong>@PaginationState.TotalItemCount</strong> items</text>
    </div>
    <nav role="navigation">
        <button class="go-first" type="button" @onclick="GoFirstAsync" disabled="@(!CanGoBack)" title="Go to first page" aria-title="Go to first page"></button>
        <button class="go-previous" type="button" @onclick="GoPreviousAsync" disabled="@(!CanGoBack)" title="Go to previous page" aria-title="Go to previous page"></button>
        <div class="pagination-text">
            Page <strong>@(PaginationState.PageIndex + 1)</strong>
            of <strong>@(PaginationState.LastPageIndex + 1)</strong>
        </div>
        <button class="go-next" type="button" @onclick="GoNextAsync" disabled="@(!CanGoForwards)" title="Go to next page" aria-title="Go to next page"></button>
        <button class="go-last" type="button" @onclick="GoLastAsync" disabled="@(!CanGoForwards)" title="Go to last page" aria-title="Go to last page"></button>
    </nav>
</div>


@code {

    // [Parameter]
    // public EventCallback<PaginationState> OnPaginate { get; set; }


    [Parameter, EditorRequired]
    public PaginationState PaginationState { get; set; }

    public bool CanGoBack => PaginationState.PageIndex > 0;
    public bool CanGoForwards => PaginationState.PageIndex < PaginationState.LastPageIndex;

    private Task GoFirstAsync() => GoToPageAsync(0);
    private Task GoPreviousAsync() => GoToPageAsync(PaginationState.PageIndex - 1);
    private Task GoNextAsync() => GoToPageAsync(PaginationState.PageIndex + 1);
    private Task GoLastAsync() => GoToPageAsync(PaginationState.LastPageIndex);

    private async Task GoToPageAsync(int pageIndex)
    {
        await PaginationState.SetPageIndexAsync(pageIndex);
        // await OnPaginate.InvokeAsync(PaginationState);
    }
}

@typeparam TDataItem

<div class="filter-item d-flex flex-column justify-content-center">
    <label>@(string.IsNullOrEmpty(Label) ? Field : Label)</label>
    @if (FilterType == FilterTypes.String)
    {
        <input type="search" autofocus @bind="filterText" @oninput="OnTextFilterValueChanged" placeholder="Filter..." />
    }
    else if (FilterType == FilterTypes.Int)
    {
        <span>Min: <input type="number" @bind=filterIntMin @bind:event="oninput" @onmouseup="OnMinMaxFilterValueChanged" @onkeyup="OnMinMaxFilterValueChanged" /> </span>
    }
    else if (FilterType == FilterTypes.MinMax)
    {
        <span>
            Min:<input type="range" min="@sliderMin" max="@sliderMax" @bind=filterIntMin @bind:event="oninput" @onmouseup="OnMinMaxFilterValueChanged" @onkeyup="OnMinMaxFilterValueChanged" /> <span class="slider-value">@filterIntMin</span>
        </span>
        <span>
            Max:<input type="range" min="@sliderMin" max="@sliderMax" @bind=filterIntMax @bind:event="oninput" @onmouseup="OnMinMaxFilterValueChanged" @onkeyup="OnMinMaxFilterValueChanged" /> <span class="slider-value">@filterIntMax</span>
        </span>
    }
    else if (FilterType == FilterTypes.DateTimeMin)
    {

        <span>
            <SimpleDatePicker Date="filterDateTime" DateChanged="(DateTime? dt)=>OnDateFilterValueChanged(dt)"></SimpleDatePicker>
        </span>
    }
    else if (FilterType == FilterTypes.DateTimeMax)
    {
        <span>
            <SimpleDatePicker Date="filterDateTime" DateChanged="(DateTime? dt)=>OnDateFilterValueChanged(dt)"></SimpleDatePicker>
        </span>
    }
    else if (FilterType == FilterTypes.CheckBox)
    {
        <span>
            <input type="checkbox" @bind=filterCheckBox @oninput="OnCheckBoxChanged">
        </span>
    }
    else if (FilterType == FilterTypes.RadioButton)
    {
        <div class="btn-group" role="group">
            @if (string.IsNullOrEmpty(DefaultSelectedOption))
            {
                <input checked type="radio" name="filter@(Field)" value="@string.Empty" class="btn-check" id="filter@(Field)All" @onchange="OnRadioButtonChanged">
            }
            else
            {
                <input type="radio" name="filter@(Field)" value="@string.Empty" class="btn-check" id="filter@(Field)All" @onchange="OnRadioButtonChanged">
            }
            <label class="btn btn-outline-secondary" for="filter@(Field)All">All</label>

            @foreach (var keyValuePair in Options)
            {
                if (DefaultSelectedOption == keyValuePair.Key)
                {
                    <input checked type="radio" name="filter@(Field)" value="@keyValuePair.Key" class="btn-check" id="btnradio@(Field+keyValuePair.Key)" @onchange="OnRadioButtonChanged">
                }
                else
                {
                    <input type="radio" name="filter@(Field)" value="@keyValuePair.Key" class="btn-check" id="btnradio@(Field+keyValuePair.Key)" @onchange="OnRadioButtonChanged">
                }
                <label class="btn btn-outline-primary" for="btnradio@(Field+keyValuePair.Key)">@keyValuePair.Value</label>
            }
        </div>
    }
</div>



@code {
    [CascadingParameter]
    public DataFilter<TDataItem> ParentFilter { get; set; }

    [Parameter]
    public FilterTypes FilterType { get; set; }
    [Parameter]
    public string Field { get; set; }
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public Dictionary<string, string> Options { get; set; }
    [Parameter]
    public string DefaultSelectedOption { get; set; }

    public string GetDisplayName => string.IsNullOrEmpty(Label) ? Field : Label;
    public bool IsActive;

    public string FilterValue
    {
        get
        {
            if (FilterType == FilterTypes.String || FilterType == FilterTypes.RadioButton)
                return filterText;
            if (FilterType == FilterTypes.Int)
                return filterIntMin.ToString();
            if (FilterType == FilterTypes.MinMax)
                return $"{filterIntMin}_{filterIntMax}";
            if (FilterType == FilterTypes.DateTimeMin || FilterType == FilterTypes.DateTimeMax)
                return filterDateTime?.ToShortDateString();
            if (FilterType == FilterTypes.CheckBox)
                return filterCheckBox.ToString();

            return string.Empty;
            //Better way?
        }
    }

    public void ClearFilter()
    {
        if (FilterType == FilterTypes.String || FilterType == FilterTypes.RadioButton)
            filterText = string.Empty;
        if (FilterType == FilterTypes.Int)
            filterIntMin = 0;
        if (FilterType == FilterTypes.MinMax)
            filterIntMin = filterIntMax = 0;
        if (FilterType == FilterTypes.DateTimeMin || FilterType == FilterTypes.DateTimeMax)
            filterDateTime = null;
        if (FilterType == FilterTypes.CheckBox)
            filterCheckBox = false;

        IsActive = false;
        ParentFilter.UpdateFilter(this);
    }

    Type type;
    string filterText = string.Empty;
    int filterIntMin = 0;
    int filterIntMax = 0;
    int sliderMin;
    int sliderMax;
    DateTime? filterDateTime;
    bool filterCheckBox;

    protected override void OnInitialized()
    {
        //Check if property is of chosen type otherwise throw?
        var property = DataGridUtils.GetItemsPropertyInfo<TDataItem>()
        .Where(x => x.Name == Field)
        .FirstOrDefault();

        if (property == null)
            throw new ArgumentNullException($"Field: {Field} does not exist in item.");

        if (FilterType == FilterTypes.RadioButton && Options == null)
            throw new ArgumentNullException("RadioButtons need the Options parameter.");

        type = property.PropertyType;

        // if (type.Name != FilterType.Name) //Do we want this? Many things can be "ToString()ed"
        //     throw new ArgumentException("The type of Field and FilterType do not match");


        if (FilterType == FilterTypes.RadioButton)
        {
            filterText = DefaultSelectedOption ?? string.Empty;
            IsActive = !string.IsNullOrEmpty(DefaultSelectedOption);
        }

        ParentFilter.AddFilterItem(this);
    }

    public void SetFilterMinMax(int min, int max)
    {
        sliderMin = min;
        sliderMax = max;
    }

    private void OnTextFilterValueChanged(ChangeEventArgs e)
    {
        IsActive = true;
        filterText = e.Value.ToString();
        ParentFilter.UpdateFilter(this);
    }

    private void OnMinMaxFilterValueChanged()
    {
        if (filterIntMax == 0 && filterIntMax == 0)
            IsActive = false;
        else
            IsActive = true;
        ParentFilter.UpdateFilter(this);
    }

    private void OnDateFilterValueChanged(DateTime? date)
    {
        if (date.HasValue)
        {
            IsActive = true;
        }
        else
        {
            IsActive = false;
        }
        filterDateTime = date;
        ParentFilter.UpdateFilter(this);
    }

    private void OnCheckBoxChanged(ChangeEventArgs e)
    {
        filterCheckBox = IsActive = (bool)e.Value;
        ParentFilter.UpdateFilter(this);
    }

    void OnRadioButtonChanged(ChangeEventArgs e)
    {
        filterText = e.Value.ToString();
        if (filterText == string.Empty)
            IsActive = false;
        else
            IsActive = true;
        ParentFilter.UpdateFilter(this);
    }
}

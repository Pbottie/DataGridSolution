@typeparam TDataItem

<div class="filter-item d-flex flex-column justify-content-center">
    <label>@(string.IsNullOrEmpty(Label) ? Field : Label)</label>
    @if (FilterType == FilterTypes.String)
    {

        <input type="search" autofocus @bind="filterText" @oninput="OnTextFilterValueChanged" placeholder="Filter..." />
    }
    else if (FilterType == FilterTypes.Int)
    {
        <span>Min: <input type="number" @bind=filterIntMin @bind:event="oninput" @onmouseup="OnMinMaxFilterValueChanged" @onkeyup="OnMinMaxFilterValueChanged" /> </span>
    }
    else if (FilterType == FilterTypes.MinMax)
    {
        <span>
            Min:<input type="range" min="0" max="250" @bind=filterIntMin @bind:event="oninput" @onmouseup="OnMinMaxFilterValueChanged" @onkeyup="OnMinMaxFilterValueChanged" /> <span class="slider-value">@filterIntMin</span>
        </span>
        <span>
            Max:<input type="range" min="0" max="250" @bind=filterIntMax @bind:event="oninput" @onmouseup="OnMinMaxFilterValueChanged" @onkeyup="OnMinMaxFilterValueChanged" /> <span class="slider-value">@filterIntMax</span>
        </span>
    }
    else if (FilterType == FilterTypes.DateTimeMin || FilterType == FilterTypes.DateTimeMax)
    {
        <span>
            <SimpleDatePicker Date="filterDateTime" DateChanged="(DateTime? dt)=>OnDateFilterValueChanged(dt)"></SimpleDatePicker>
        </span>
    }
</div>



@code {
    [CascadingParameter]
    public DataFilter<TDataItem> ParentFilter { get; set; }

    [Parameter]
    public FilterTypes FilterType { get; set; }
    [Parameter]
    public string Field { get; set; }
    [Parameter]
    public string Label { get; set; }

    public string GetDisplayName => string.IsNullOrEmpty(Label) ? Field : Label;
    public bool IsActive;

    public string FilterValue
    {
        get
        {
            if (FilterType == FilterTypes.String)
                return filterText;
            if (FilterType == FilterTypes.Int)
                return filterIntMin.ToString();
            if (FilterType == FilterTypes.MinMax)
                return $"{filterIntMin}_{filterIntMax}";
            if (FilterType == FilterTypes.DateTimeMin || FilterType == FilterTypes.DateTimeMax)
                return filterDateTime?.ToShortDateString();

            return string.Empty;
            //Better way?
        }
    }

    public void ClearFilter()
    {
        if (FilterType == FilterTypes.String)
            filterText = string.Empty;
        if (FilterType == FilterTypes.Int)
            filterIntMin = 0;
        if (FilterType == FilterTypes.MinMax)
            filterIntMin = filterIntMax = 0;
        if (FilterType == FilterTypes.DateTimeMin || FilterType == FilterTypes.DateTimeMax)
            filterDateTime = null;

        IsActive = false;
        ParentFilter.UpdateFilter(this);
    }

    Type type;
    string filterText = string.Empty;
    int filterIntMin = 0;
    int filterIntMax = 0;
    DateTime? filterDateTime;

    protected override void OnInitialized()
    {
        //Check if property is of chosen type otherwise throw?
        var property = DataGridUtils.GetItemsPropertyInfo<TDataItem>()
        .Where(x => x.Name == Field)
        .FirstOrDefault();

        if (property == null)
            throw new ArgumentNullException($"Field: {Field} does not exist in item!");

        type = property.PropertyType;

        // if (type.Name != FilterType.Name) //Do we want this? Many things can be "ToString()ed"
        //     throw new ArgumentException("The type of Field and FilterType do not match");


        ParentFilter.AddFilterItem(this);

    }


    private void OnTextFilterValueChanged(ChangeEventArgs e)
    {
        IsActive = true;
        filterText = e.Value.ToString();
        ParentFilter.UpdateFilter(this);
    }

    private void OnMinMaxFilterValueChanged()
    {
        IsActive = true;
        ParentFilter.UpdateFilter(this);
    }

    private void OnDateFilterValueChanged(DateTime? date)
    {
        if (date.HasValue)
        {
            IsActive = true;
        }
        else
        {
            IsActive = false;
        }
        filterDateTime = date;
        ParentFilter.UpdateFilter(this);
    }

}

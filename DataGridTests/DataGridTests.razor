@attribute [TestClass]
@inherits BunitTestContext

@code
{

    private List<SearchMeasurementListItem> testData;

    // [TestMethod]
    // public void DataGridRendersDefault()
    // {
    // var testData = DataGridProject.BogusData.GetData();
    //     var cut = Render(
    // @<DataGrid Items="testData" class="table-striped">

    // </DataGrid>
    //      );

    //     var test = DataGridUtils.GetItemsPropertyInfo<SearchMeasurementListItem>()
    //   .Select(x => x.GetValue(testData));

    // }

    [TestInitialize]
    public void Init()
    {
        testData = DataGridProject.BogusData.GetData(10);
    }


    [TestMethod]
    public void GridItemTestDoesNotIndependentlyRender()
    {
        Assert.ThrowsException<ArgumentNullException>(
    () => Render(
    @<GridItem TGridItem="object"></GridItem>
    ));

    }

    [TestMethod]
    public void DataGridRendersWithoutErrors()
    {

        var cut = Render(
    @<DataGrid Items="testData" class="table-striped">

        <GridItem Field="Id"></GridItem>
        <GridItem Field="MeasurementName"></GridItem>
        <GridItem Field="HasBreakdowns"></GridItem>
        <GridItem Title="HasBreakdowns"></GridItem>

    </DataGrid>
        );
    }

    [TestMethod]
    public void DataGridRendersCorrectly()
    {
        //Should this throw an error since it does not render "Name" anywhere?
        var cut = Render(
    @<DataGrid Items="testData" class="table-striped">

        <GridItem Field="Id"></GridItem>
        <GridItem Field="MeasurementName">Name</GridItem>
    </DataGrid>
    );

        cut.MarkupMatches(
    @<div>
        <table class="table table-striped">
            <thead>
                <tr diff:ignoreChildren>
                </tr>
            </thead>
            <tbody diff:ignoreChildren>
            </tbody>
        </table>
    </div>
    );

        var headers = cut.FindAll("th");
        headers.Count.Should().Be(2);
        headers.First().TextContent.Trim().Should().Be("Id");
        headers.Last().TextContent.Trim().Should().Be("MeasurementName");

        var tableBody = cut.Find("tbody");
        tableBody.ChildElementCount.Should().Be(10);
    }

    [TestMethod]
    public void DataGridDuplicateFieldThrowsException()
    {

        Assert.ThrowsException<Exception>(() =>
    Render(
    @<DataGrid Items="testData" class="table-striped">

        <GridItem Field="Id"></GridItem>
        <GridItem Field="Id"></GridItem>
        <GridItem Field="MeasurementName">Name</GridItem>
    </DataGrid>
        )
        );

    }









}

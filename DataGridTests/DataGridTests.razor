@attribute [TestClass]
@inherits BunitTestContext

@code
{

    private List<SearchMeasurementListItem> testData;

    // [TestMethod]
    // public void DataGridRendersDefault()
    // {
    // var testData = DataGridProject.BogusData.GetData();
    //     var cut = Render(
    // @<DataGrid Items="testData" class="table-striped">

    // </DataGrid>
    //      );

    //     var test = DataGridUtils.GetItemsPropertyInfo<SearchMeasurementListItem>()
    //   .Select(x => x.GetValue(testData));

    // }

    [TestInitialize]
    public void Init()
    {
        testData = DataGridProject.BogusData.GetData(10);
    }


    [TestMethod]
    public void GridItemTestDoesNotIndependentlyRender()
    {
        Assert.ThrowsException<ArgumentNullException>(
        () => Render(
    @<GridItem TGridItem="object"></GridItem>
        ));

    }

    [TestMethod]
    public void DataGridRendersWithoutErrors()
    {

        var cut = Render(
    @<DataGrid Items="testData" class="table-striped">

        <GridItem Field="Id"></GridItem>
        <GridItem Field="MeasurementName">Name</GridItem>
        <GridItem>Cold</GridItem>

    </DataGrid>
    );

    }

    [TestMethod]
    public void DataGridRendersCorrectly()
    {

        var cut = Render(
    @<DataGrid Items="testData" class="table-striped">

        <GridItem Field="Id"></GridItem>
        <GridItem Field="MeasurementName">Name</GridItem>
        <GridItem>Cold</GridItem>

    </DataGrid>
        );

        cut.MarkupMatches(
    @<table class="table  table-striped">
    <thead>
        <tr diff:ignoreChildren>
        </tr>
    </thead>
    <tbody diff:ignoreChildren>
    </tbody>
</table>
        );

    }

    [TestMethod]
    public void DataGridDuplicateFieldThrowsException()
    {

        Assert.ThrowsException<Exception>(() =>
        Render(
    @<DataGrid Items="testData" class="table-striped">

        <GridItem Field="Id"></GridItem>
        <GridItem Field="Id"></GridItem>
        <GridItem Field="MeasurementName">Name</GridItem>
        <GridItem>Cold</GridItem>

    </DataGrid>
        )
        );

    }









}
